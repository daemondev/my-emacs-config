{
    // Settings
    "passfail": false,              // Stop on first error.
    "maxerr": 100,                  // Maximum error before stopping.


    // Predefined globals whom JSHint will ignore.
    "browser": true,                // Standard browser globals e.g. `window`, `document`.
    "nonstandard": false,

    "node": true,
    "rhino": false,
    "couch": false,
    "wsh": false,                   // Windows Scripting Host.

    "jquery": false,
    "prototypejs": false,
    "mootools": false,
    "dojo": false,

    "predef" : [                    // Custom globals.
        "Storage",
        "ActiveXObject",
        "require",
        "define",
        "oz"
    ],


    // Development.
    "debug": false,                 // Allow debugger statements e.g. browser breakpoints.
    "devel": true,                  // Allow developments statements e.g. `console.log();`.


    // ECMAScript 5.
    "es5": false,                   // Allow ECMAScript 5 syntax.
    "strict": false,                // Require `use strict` pragma in every file.
    "globalstrict": false,          // Allow global "use strict" (also enables 'strict').
    "esnext": false,                // tells JSHint that your code uses ES.next specific features such as const and let


    // The Good Parts.
    "bitwise": false,               // Prohibit bitwise operators (&, |, ^, etc.).
    "curly": false,                 // Require {} for every new block or scope.
    "eqeqeq": false,                // prohibits the use of == and != in favor of === and !==
    "forin": false,                 // requires all for in loops to filter objects' items
    "immed": false,                 // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef": false,               // Prohipit variable use before definition.
    "noarg": false,                 // Prohibit use of `arguments.caller` and `arguments.callee`.
    "asi": false,                   // Tolerate Automatic Semicolon Insertion (no semicolons).
    "laxbreak": true,               // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma": true,               // suppresses warnings about comma-first coding style
    "boss": true,                   // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "eqnull": true,                 // Tolerate use of `== null`.
    "evil": true,                   // Tolerate use of `eval`.
    "expr": false,                  // Tolerate `ExpressionStatement` as Programs.
    "loopfunc": true,               // Allow functions to be defined within loops.
    "regexp": false,                // Prohibit `.` and `[^...]` in regular expressions.
    "regexdash": false,             // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl": true,              // Tolerate script-targeted URLs.
    "shadow": false,                // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "supernew" : false,             // Tolerate `new function () { ... };` and `new Object;`.
    "undef": true,                  // Require all non-global variables be declared before they are used.
    "funcscope": false,             // suppresses warnings about declaring variables inside of control structures while accessing them later from the outside
    "iterator": false,              // suppresses warnings about the __iterator__ property
    "proto": true,                  // suppresses warnings about the __proto__ property
    "onecase": false,               // suppresses watnings about switches with just one case

    // Personal styling preferences.
    "newcap": false,                // Require capitalization of all constructor functions e.g. `new F()`.
    "noempty": false,               // Prohibit use of empty blocks.
    "nonew": true,                  // Prohibit use of constructors for side-effects.
    "nomen": false,                 // Prohibit use of initial or trailing underbars in names.
    "onevar": false,                // Allow only one `var` statement per function.
    "plusplus": false,              // Prohibit use of `++` & `--`.
    "sub": true,                    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "trailing": false,              // Prohibit trailing whitespaces.
    "white": false,                 // Check against strict whitespace and indentation rules.
    "lastsemic": true,              // suppresses warnings about missing semicolons but only when the semicolon is omited for the last statement in a one-line block
    "multistr": true,               // suppresses warnings about multi-line strings
    "indent": 4                     // Specify indentation spacing
}
